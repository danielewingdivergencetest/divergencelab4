{
	"name": "RefreshReporting",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "InvoicesTable",
						"type": "DatasetReference"
					},
					"name": "ReadInvoices"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutstandingBalance",
						"type": "DatasetReference"
					},
					"name": "WriteInvoices"
				},
				{
					"dataset": {
						"referenceName": "TopVendorBalance",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CalculateBalance"
				},
				{
					"name": "ConvertDataTypes"
				},
				{
					"name": "FilterForBalance"
				},
				{
					"name": "SortBalanceDue"
				},
				{
					"name": "Aggregate1"
				},
				{
					"name": "Sort1"
				},
				{
					"name": "Filter1"
				}
			],
			"script": "source(output(\n\t\tInvoiceID as string,\n\t\tVendorID as string,\n\t\tInvoiceNumber as string,\n\t\tInvoiceDate as string,\n\t\tInvoiceTotal as string,\n\t\tPaymentTotal as string,\n\t\tCreditTotal as string,\n\t\tTermsID as string,\n\t\tInvoiceDueDate as string,\n\t\tPaymentDate as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> ReadInvoices\nConvertDataTypes derive(InvoiceBalance = InvoiceTotal-PaymentTotal-CreditTotal) ~> CalculateBalance\nReadInvoices derive(InvoiceID = toInteger(InvoiceID),\n\t\tVendorID = toInteger(VendorID),\n\t\tInvoiceDate = toDate(InvoiceDate, 'M/d/yyyy H:mm'),\n\t\tInvoiceTotal = toDecimal(InvoiceTotal),\n\t\tPaymentTotal = toDecimal(PaymentTotal),\n\t\tCreditTotal = toDecimal(CreditTotal)) ~> ConvertDataTypes\nCalculateBalance filter(InvoiceBalance>0) ~> FilterForBalance\nFilterForBalance sort(desc(InvoiceBalance, true)) ~> SortBalanceDue\nCalculateBalance aggregate(groupBy(VendorID),\n\tTotalBalnceDue = sum(InvoiceBalance)) ~> Aggregate1\nAggregate1 sort(desc(TotalBalnceDue, true)) ~> Sort1\nSort1 filter(TotalBalnceDue>0) ~> Filter1\nSortBalanceDue sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> WriteInvoices\nFilter1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
		}
	}
}